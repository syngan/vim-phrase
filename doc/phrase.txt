*phrase.txt*	gather useful phrase, refer it whenever you want

>
        88888888b.  888                                          
        888    "88b 888                                          
        888     888 888                                          
        888    d88P 888888b.  888d888 8888b.  .d8888b   .d888b.  
        88888888P"  888  "88b 888P"      "88b 88K      d8P   Y8b 
        888         888   888 888    .d888888 "Y8888b. 888888888 
        888         888   888 888    888  888      X88 Y8b.      
        888         888   888 888    "Y888888  88888P'  "Y88888 
<

Version: 0.6
Author : t9md <taqumd@gmail.com>
GitHub: http://github.com/t9md/vim-phrase
==============================================================================
CONTENTS					*phrase-contents*

Introduction				|phrase-introduction|
Variables				|phrase-variables|
Commmands				|phrase-commands|
Keymap					|phrase-keymap|
Unite plugin				|phrase-unite|
Configuration Examples			|phrase-configuration|
Collaborate				|phrase-collaborate|
  Dropbox				|phrase-collaborate-dropbox|
  Github				|phrase-collaborate-github|
ToDo					|phrase-todo|
Bugs					|phrase-bugs|
Changelog				|phrase-changelog|

==============================================================================
Introduction						*phrase-introduction*

*phrase.vim* is Vim plugin to help gathering useful phrase of several programming
languages.
You can refer it conveniently while you are programming.

Requirement:
- Vim 7.3 or later

==============================================================================
VARIABLES						 *phrase-variables*

*g:phrase_author*
	Default: $USER

	Your identification of phrase. This variable is used to identify
	your phrase from several subdirectory under |g:phrase_basedir|.

*g:phrase_basedir*
	Default: '~/.vim'

	Each phrase is created under directory below

	{g:phrase_basedir}/phrase/{g:phrase_author}

*g:phrase_author_priority*
	Default: {}

	used by phrase |unite.vim| source when sorting each phrase.
	higher priority comes first.

	Example: >
	let g:phrase_author_priority = {}
	let g:phrase_author_priority['t9md'] = 3
	let g:phrase_author_priority['yamada'] = 2
	let g:phrase_author_priority['tanaka'] = 2
<
*b:phrase_file*
	Default: not exist

	If this variable is set, used to find phrase file.
	
Example~
>
	" Opscode's Chef is based on Ruby, but I want chef's phrase keep
	" separated from Ruby's one.
	au BufNewFile,BufRead */*cookbooks/* let b:phrase_file = 'phrase__chef.rb'

modeline~
phrase.vim support original modeline.
Used to set |b:phrase_file|.
phrase.vim search this modeline in 'last two line' in file.

Example modeline~
in chef.rb
>
	# phrase_file: phrase__chef.rb

Example for Rakefile~
.vimrc
>
	au BufNewFile,BufRead Rakefile let b:phrase_file = 'phrase__rake.rb'
<
in rake.rb
>
	# phrase_file: phrase__rake.rb
<
==============================================================================
COMMANDS						*phrase-commands*
								 *:PhraseEdit*
:PhraseEdit {filename}
	Edit phrase
	{filename} is optional
							       *:PhraseCreate* 
:[range]PhraseCreate {filename}
	{filename} is optional
	Create new phrase from current |:range|.

==============================================================================
KEYMAP							*phrase-keymap*

n_<Plug>(phrase-edit)
	Edit phrase file

v_<Plug>(phrase-create)
	Create phrase from selected area

==============================================================================
UNITE PLUGIN						 *phrase-unite*

|phrase.vim| provide |unite.vim| source.
I highly recommend you to install |unite.vim| to get full power of |phrase.vim|.

Try
>
	:Unite phrase
<
==============================================================================
CONFIGURATION EXAMPLE                               *phrase-configuration*
>
	let g:phrase_author  = "t9md"

	nmap gp <Plug>(phrase-edit)
	xmap gp <Plug>(phrase-create)

	" If you use Unite plugin
	nnoremap <silent> <Space>p  :<C-u>Unite phrase -start-insert<CR>
<
==============================================================================
COLLABORATE						  *phrase-collaborate*
------------------------------------------------------------------------------
DROPBOX						  *phrase-collaborate-dropbox*

Shareing phrase folder with Dropbox is another practical use case.

If you dont't want to .swp files be synced every time your collaborator
view your phrase, disable making swap file in among all collaborators.
>
    au BufNewFile,BufRead */phrase/*/phrase__*.* setlocal noswapfile
<
------------------------------------------------------------------------------
GITHUB						  *phrase-collaborate-github*

Publish your phrases to github.
My proposal about this type of repository name is `phrase-{yourname}`.

Repository structure:~

	phrase-{yourname}/phrase/{yourname}/
	phrase-{yourname}/phrase/{yourname}/phrase__vim.vim
	phrase-{yourname}/phrase/{yourname}/phrase__ruby.rb

Example repository:~
  https://github.com/t9md/phrase-t9md

	phrase-t9md/phrase/t9md
	phrase-t9md/phrase/t9md/phrase__vim.vim
	phrase-t9md/phrase/t9md/phrase__ruby.rb

Unite phrase plugin gather phrases from directory named `phrase` in &rtp.
So if you manage you plugin with pathogen, Vundle, or NeoBundle , you can also
manage phrases with same manner as plugin.
For example you can import t9md's phrase by setting following line in .vimrc
>
	Bundle: t9md/phrase-t9md
	or
	NeoBundle: t9md/phrase-t9md
<
And easily refer with 'Unite phrase'

==============================================================================
FIND-ORDER						 *phrase-find-order*

							     *phrase-filename*
Phrase file name~

Phrase file is merely normal file, typically its simple txt file containing
some set of example source code written in some programming languages.
The name of phrase file should follow following convention.

* phrase__{category}.{ext}

for {category}, it is ordinarily equal to |&filetype| but sometime its
represent some sort of category which that phrase file aiming to.

{ext} is extention for file.

ex) >
	phrase__ruby.rb
	phrase__perl.pl
<

the above example are phrase file for ruby and perl.

ex) >
	phrase__rake.rb
	phrase__chef.rb
	phrase__vagrant.rb
<
above example are phrase file for Rakefile, Opscode Chef's and for Vagrant.
Each of these file is written their own DSL(internal DSL powered by Ruby).
All of them are esentially Ruby, so should be treated as ruby file from
vim's view.

So, category is sometime may different from |&filetype|, and {ext} provide
hint to Vim to determine setting |&filetype|.

Author's phrase~

Directory: {g:phrase_basedir}/phrase/{g:phrase_author}/{phrase_file}

search order for {phrase_file}
 - b:phrase_file
 - {&filetype}.{current_ext}
 - {&filetype}.*

All phrase~

Directory1: {g:phrase_basedir}/phrase/{g:phrase_author}/{phrase_file}
Directory2: {&runtimepath}/phrase/*/{phrase_file}

Phrase Comment determination~

phrase.vim maintaine comment syntax for each programming languages by itself.
trying to find proper comment syntax from current {phrase_file}.
Comment string is suded to insert phrase header.

Phrase Header format~

as syntax perspective, it merely comment that follow following format.

==============================================================================
BUGS							*phrase-bugs*

==============================================================================
CHANGELOG						*phrase-changelog*

2013-12-08:
	- disastrous change for phrase file's naming convenion.
2013-12-08: v0.6
	- code rewritten
	- eliminate phrase#list() for simplicity
2011-08-21: v0.5
	- update help
	- :PhraseList no longer accept argument(for simplicity).
	- :PhraseCreate no longer accept argument(for simplicity).
	- b:phrase_filetype is renamed as b:phrase_ext.
2011-08-04: v0.4
	- add sorter_phrase for unite.
2011-07-31: v0.3
	- introduce 'b:phrase_filetype' var.
2011-03-10: v0.2
	- Support multiple languages
	- Change configuration variables.
          g:phrase_dir is no longer used.
          Use g:phrase_author and g:phrase_basedir
          Use g:phrase_ft_tbl to customise filetype extension map and comment
          string.
	- Eliminate comment string when creating PhraseList.
2011-03-06: v0.1
	- First release
==============================================================================
vim:tw=78:ts=8:ft=help:norl:
